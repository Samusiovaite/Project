/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kamile.note;

import calendar.Event;
import data.BinFileReader;
import data.BinFileWriter;
import java.time.LocalDateTime;
import static java.time.Month.APRIL;
import static java.time.Month.AUGUST;
import static java.time.Month.DECEMBER;
import static java.time.Month.FEBRUARY;
import static java.time.Month.JANUARY;
import static java.time.Month.JULY;
import static java.time.Month.JUNE;
import static java.time.Month.MARCH;
import static java.time.Month.MAY;
import static java.time.Month.NOVEMBER;
import static java.time.Month.OCTOBER;
import static java.time.Month.SEPTEMBER;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author KamilÄ—
 */
public class GUICalendar extends javax.swing.JFrame {

    /**
     * Creates new form GUICalendar
     */
    
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    private final String calendarFileStorage = "calendar.bin";

    public GUICalendar() {
        initComponents();
        DefaultTableModel model = null;
        BinFileReader binFileReader = new BinFileReader("data");
        
        ArrayList<Object> objects;
        try {
            objects = binFileReader.readBytes();
            for(int i = 0; i < objects.size(); ++i) {
                if(objects.get(i).getClass().toString().equals("class calendar.Event")) {
                    Event event = (Event) objects.get(i);
                  
                    switch (event.getDateTime().getMonth()) {
                        case JANUARY -> model = (DefaultTableModel) this.January.getModel();
                        case FEBRUARY -> model = (DefaultTableModel) this.February.getModel();
                        case MARCH -> model = (DefaultTableModel) this.March.getModel();
                        case APRIL -> model = (DefaultTableModel) this.April.getModel();
                        case MAY -> model = (DefaultTableModel) this.May1.getModel();
                        case JUNE -> model = (DefaultTableModel) this.June.getModel();
                        case JULY -> model = (DefaultTableModel) this.July.getModel();
                        case AUGUST -> model = (DefaultTableModel) this.August.getModel();
                        case SEPTEMBER -> model = (DefaultTableModel) this.September.getModel();
                        case OCTOBER -> model = (DefaultTableModel) this.October.getModel();
                        case NOVEMBER -> model = (DefaultTableModel) this.November.getModel();
                        case DECEMBER -> model = (DefaultTableModel) this.December.getModel();
                        default -> {
                        }
                    }
                    
                    if(model != null){
                     model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" +
                                  event.getDescription() + "<br>" + event.getDateTime().toString() +
                                  "<br>" + event.getPlace()+ "</html>"});
                    }
                }
            }
        } catch (Exception ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        March = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        January = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        February = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        June = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        April = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        May1 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        July = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        August = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        September = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        October = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        November = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        December = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        Title = new javax.swing.JTextField();
        eventDescription = new javax.swing.JTextField();
        dateAndTime = new javax.swing.JTextField();
        place = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        saveEvent = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Modern No. 20", 3, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CALENDAR");

        March.setAutoCreateRowSorter(true);
        March.setBackground(new java.awt.Color(204, 204, 255));
        March.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        March.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        March.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MARCH"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        March.setRowHeight(80);
        jScrollPane1.setViewportView(March);

        January.setAutoCreateRowSorter(true);
        January.setBackground(new java.awt.Color(204, 204, 255));
        January.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        January.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        January.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "JANUARY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        January.setRowHeight(80);
        jScrollPane2.setViewportView(January);

        February.setAutoCreateRowSorter(true);
        February.setBackground(new java.awt.Color(204, 204, 255));
        February.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        February.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        February.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FEBRUARY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        February.setRowHeight(80);
        jScrollPane3.setViewportView(February);

        June.setAutoCreateRowSorter(true);
        June.setBackground(new java.awt.Color(204, 204, 255));
        June.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        June.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        June.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "JUNE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        June.setRowHeight(80);
        jScrollPane4.setViewportView(June);

        April.setAutoCreateRowSorter(true);
        April.setBackground(new java.awt.Color(204, 204, 255));
        April.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        April.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        April.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "APRIL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        April.setRowHeight(80);
        jScrollPane5.setViewportView(April);

        May1.setAutoCreateRowSorter(true);
        May1.setBackground(new java.awt.Color(204, 204, 255));
        May1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        May1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        May1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MAY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        May1.setRowHeight(80);
        jScrollPane6.setViewportView(May1);

        July.setAutoCreateRowSorter(true);
        July.setBackground(new java.awt.Color(204, 204, 255));
        July.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        July.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        July.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "JULY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        July.setRowHeight(80);
        jScrollPane7.setViewportView(July);

        August.setAutoCreateRowSorter(true);
        August.setBackground(new java.awt.Color(204, 204, 255));
        August.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        August.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        August.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AUGUST"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        August.setRowHeight(80);
        jScrollPane8.setViewportView(August);

        September.setAutoCreateRowSorter(true);
        September.setBackground(new java.awt.Color(204, 204, 255));
        September.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        September.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        September.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SEPTEMBER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        September.setRowHeight(80);
        jScrollPane9.setViewportView(September);

        October.setAutoCreateRowSorter(true);
        October.setBackground(new java.awt.Color(204, 204, 255));
        October.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        October.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        October.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OCTOBER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        October.setRowHeight(80);
        jScrollPane10.setViewportView(October);

        November.setAutoCreateRowSorter(true);
        November.setBackground(new java.awt.Color(204, 204, 255));
        November.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        November.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        November.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOVEMBER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        November.setRowHeight(80);
        jScrollPane11.setViewportView(November);

        December.setAutoCreateRowSorter(true);
        December.setBackground(new java.awt.Color(204, 204, 255));
        December.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));
        December.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        December.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DECEMBER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        December.setRowHeight(80);
        jScrollPane12.setViewportView(December);

        jLabel2.setFont(new java.awt.Font("Modern No. 20", 3, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ADD NEW EVENT:");

        Title.setBackground(new java.awt.Color(204, 204, 255));
        Title.setText("Enter event title");
        Title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TitleActionPerformed(evt);
            }
        });

        eventDescription.setBackground(new java.awt.Color(204, 204, 255));
        eventDescription.setText("Enter event description");

        dateAndTime.setBackground(new java.awt.Color(204, 204, 255));
        dateAndTime.setText("Enter event date and time");
        dateAndTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateAndTimeActionPerformed(evt);
            }
        });

        place.setBackground(new java.awt.Color(204, 204, 255));
        place.setText("Enter event place");

        jLabel3.setFont(new java.awt.Font("Modern No. 20", 3, 18)); // NOI18N
        jLabel3.setText("Title:");

        jLabel4.setFont(new java.awt.Font("Modern No. 20", 3, 18)); // NOI18N
        jLabel4.setText("Description:");

        jLabel5.setFont(new java.awt.Font("Modern No. 20", 3, 18)); // NOI18N
        jLabel5.setText("Date and Time:");

        jLabel6.setFont(new java.awt.Font("Modern No. 20", 3, 18)); // NOI18N
        jLabel6.setText("Place:");

        Back.setBackground(new java.awt.Color(255, 204, 204));
        Back.setText("BACK");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        saveEvent.setBackground(new java.awt.Color(255, 204, 204));
        saveEvent.setText("SAVE EVENT");
        saveEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEventActionPerformed(evt);
            }
        });

        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateAndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(saveEvent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete)
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Back))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(eventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1)
                        .addComponent(dateAndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(saveEvent)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        GUIMain main = new GUIMain();
        main.show();
        dispose();
    }//GEN-LAST:event_BackActionPerformed

    private void TitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleActionPerformed

    private void saveEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEventActionPerformed
       if(this.Title.getText().equals("") || this.eventDescription.getText().equals("")
         || this.dateAndTime.getText().equals("") || this.place.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Please enter All data!");
       }
       
       Event event = new Event(this.Title.getText(),
                               this.eventDescription.getText(), 
                               LocalDateTime.parse(this.dateAndTime.getText(), this.formatter),
                               this.place.getText()
       );
       
       LocalDateTime a = LocalDateTime.parse(this.dateAndTime.getText(), this.formatter);
       
        switch (a.getMonth()) {
            case JANUARY ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.January.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case FEBRUARY ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.February.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case MARCH ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.March.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case APRIL ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.April.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case MAY ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.May1.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case JUNE ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.June.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case JULY ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.July.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case AUGUST ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.August.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case SEPTEMBER ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.September.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case OCTOBER ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.October.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            case NOVEMBER ->                 {
                    DefaultTableModel model = (DefaultTableModel) this.November.getModel();
                    model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
                }
            default -> {
            }
        }
       
        if(a.getMonth().equals(DECEMBER)){
            DefaultTableModel model = (DefaultTableModel) this.December.getModel();
           model.addRow(new Object[]{"<html>" + event.getTitle() + "<br>" + event.getDescription() + "<br>" + event.getDateTime().toString() + "<br>" + event.getPlace()+ "</html>"});
       }
        
        BinFileWriter writer = new BinFileWriter(this.calendarFileStorage, "data");
        writer.setWritable(event);
        
        Thread thread = new Thread(writer);
        thread.start();
    }//GEN-LAST:event_saveEventActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        ArrayList<JTable> tables = new ArrayList<>();
        tables.add(this.January);
        tables.add(this.February);
        tables.add(this.March);
        tables.add(this.April);
        tables.add(this.May1);
        tables.add(this.June);
        tables.add(this.July);
        tables.add(this.August);
        tables.add(this.September);
        tables.add(this.October);
        tables.add(this.November);
        tables.add(this.December);
        
        JTable selectedTable = null;
        int selectedRowElement = -1;
        for(int i = 0; i < tables.size(); ++i) {
            if(tables.get(i).getSelectedRow() >= 0) {
                selectedTable = tables.get(i);
                selectedRowElement = tables.get(i).getSelectedRow();
                break;
            }
        }
        
        if(selectedTable != null) {
            DefaultTableModel model = (DefaultTableModel) selectedTable.getModel();
        
            if (selectedRowElement >= 0) {
                model.removeRow(selectedRowElement);
                JOptionPane.showMessageDialog(null, "Row Deleted");
                
                ArrayList<Object> events = new ArrayList();
                for(int i = 0; i < tables.size(); ++i) {
                    model = (DefaultTableModel) tables.get(i).getModel();
                    for(int j = 0; j < model.getRowCount(); ++j){
                        String value = model.getValueAt(j, 0).toString();
                        String[] splittedValue = value.replace("<html>", "").replace("</html>", "").split("<br>");
                        Event newEvent = new Event(splittedValue[0], splittedValue[1], 
                                                   LocalDateTime.parse(splittedValue[2].replace("T", " "), this.formatter), splittedValue[3]);
                        events.add(newEvent);
                    }
                } 
               
                BinFileWriter writer = new BinFileWriter(this.calendarFileStorage, "data");
                try {
                    writer.overwriteFile(events);
                } catch (Exception ex) {

                }
            } else {
                JOptionPane.showMessageDialog(null, "Unable To Delete");
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void dateAndTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateAndTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateAndTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUICalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUICalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUICalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUICalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUICalendar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable April;
    private javax.swing.JTable August;
    private javax.swing.JButton Back;
    private javax.swing.JTable December;
    private javax.swing.JTable February;
    private javax.swing.JTable January;
    private javax.swing.JTable July;
    private javax.swing.JTable June;
    private javax.swing.JTable March;
    private javax.swing.JTable May1;
    private javax.swing.JTable November;
    private javax.swing.JTable October;
    private javax.swing.JTable September;
    private javax.swing.JTextField Title;
    private javax.swing.JTextField dateAndTime;
    private javax.swing.JButton delete;
    private javax.swing.JTextField eventDescription;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField place;
    private javax.swing.JButton saveEvent;
    // End of variables declaration//GEN-END:variables
}
