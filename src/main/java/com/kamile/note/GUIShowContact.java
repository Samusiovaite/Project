/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kamile.note;


import contact.Address;
import contact.Contact;
import data.BinFileReader;
import data.BinFileWriter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author KamilÄ—
 */
public class GUIShowContact extends javax.swing.JFrame {

    /**
     * Creates new form GUIShowContact
     */
    
    private final String contactFileStorage = "contact.bin";

    public GUIShowContact() {
         initComponents();
        
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        BinFileReader binFileReader = new BinFileReader("data");
        
        ArrayList<Object> objects;
        try {
            objects = binFileReader.readBytes();
            for(int i = 0; i < objects.size(); ++i) {
                if(objects.get(i).getClass().toString().equals("class contact.Contact")) {
                    Contact contact = (Contact) objects.get(i);
                    Address address = (Address) contact.getAddress();
                    model.addRow(new Object[]{contact.getFirstName(), contact.getLastName(),
                    contact.getPhoneNumberPrefix() + contact.getPhoneNumber(), contact.getEmail() + contact.getEmailPostfix(),
                    contact.getDateOfBirthday(), address.getCoutry() + ", " +
                    address.getCity(), address.getStreetName() + ", " + address.getHouseOrApartamentNumber() + ", " +
                    address.getZipCode()});
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(GUINote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ContactList = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        back = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        edit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ContactList.setFont(new java.awt.Font("Modern No. 20", 3, 48)); // NOI18N
        ContactList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ContactList.setText("CONTACT LIST");

        jTable1.setBackground(new java.awt.Color(204, 204, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Surname", "Phone number", "Email", "Date of Birthday", "Country and City", "Street and zip-code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        back.setBackground(new java.awt.Color(255, 204, 204));
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(255, 204, 204));
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        edit.setText("EDIT");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(delete)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 944, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edit)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContactList, javax.swing.GroupLayout.PREFERRED_SIZE, 1082, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edit)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(ContactList))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(back)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(430, 430, 430)
                                .addComponent(delete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        GUIContact main = new GUIContact();
        main.show();
        dispose();
    }//GEN-LAST:event_backActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
       DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
       int getSelectedRowForDeletion = jTable1.getSelectedRow();
       if (getSelectedRowForDeletion >= 0) {
            model.removeRow(getSelectedRowForDeletion);
            JOptionPane.showMessageDialog(null, "Row Deleted");
            
            ArrayList<Object> contacts = new ArrayList();
            for(int i = 0; i < model.getRowCount(); ++i){
                Address address = new Address(model.getValueAt(i, 5).toString().split(", ")[0],
                                              model.getValueAt(i, 5).toString().split(", ")[1],
                                              model.getValueAt(i, 6).toString().split(", ")[0],
                                              Integer.parseInt(model.getValueAt(i, 6).toString().split(", ")[1]),
                                              Integer.parseInt(model.getValueAt(i, 6).toString().split(", ")[2])
                );
                Contact newContact = new Contact(model.getValueAt(i, 0).toString(),
                                                 model.getValueAt(i, 1).toString(),
                                                 model.getValueAt(i, 2).toString(),
                                                 model.getValueAt(i, 3).toString(),
                                                 model.getValueAt(i, 4).toString(),
                                                 address
                );
                contacts.add(newContact);
            }

            BinFileWriter writer = new BinFileWriter(this.contactFileStorage, "data");
            try {
                writer.overwriteFile(contacts);
            } catch (Exception ex) {
                Logger.getLogger(GUINote.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Unable To Delete");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
        ArrayList<Object> contacts = new ArrayList();
        for(int i = 0; i < model.getRowCount(); ++i){
            Address address = new Address(model.getValueAt(i, 5).toString().split(", ")[0],
                                          model.getValueAt(i, 5).toString().split(", ")[1],
                                          model.getValueAt(i, 6).toString().split(", ")[0],
                                          Integer.parseInt(model.getValueAt(i, 6).toString().split(", ")[1]),
                                          Integer.parseInt(model.getValueAt(i, 6).toString().split(", ")[2])
            );
            Contact newContact = new Contact(model.getValueAt(i, 0).toString(),
                                             model.getValueAt(i, 1).toString(),
                                             model.getValueAt(i, 2).toString(),
                                             model.getValueAt(i, 3).toString(),
                                             model.getValueAt(i, 4).toString(),
                                             address
            );
            contacts.add(newContact);
        }
        BinFileWriter writer = new BinFileWriter(this.contactFileStorage, "data");
        try {
            writer.overwriteFile(contacts);
        } catch (Exception ex) {
            Logger.getLogger(GUINote.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIShowContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIShowContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIShowContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIShowContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIShowContact().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ContactList;
    private javax.swing.JButton back;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
